<?php

namespace app\models;

use Yii;
use yii\data\ActiveDataProvider;
use yii\db\ActiveRecord;

/**
 * Class Messages
 * @package app\models
 * @property String $created_at
 * @property String $updated_at
 * @property integer $created_by
 * @property integer $updated_by
 */


class Messages extends \yii\db\ActiveRecord
{

    public $modifier;

    public function beforeSave($insert)
    {
        date_default_timezone_set(Yii::$app->params['timeZone']);

        $user_id = isset($this->modifier)? $this->modifier->user_id : Yii::$app->user->id;
        if($this->isNewRecord){
            $this->created_at = date('Y-m-d H:i:s');
            $this->created_by = $user_id;
        }

            $this->updated_at = date('Y-m-d H:i:s');
            $this->updated_by = $user_id;

        $this->on(ActiveRecord::EVENT_AFTER_INSERT,['app\models\DigiMailer','sendNewMessageAdded'],$this);

        if($this->user->user_role == 1 ) $this->read_by_admin = 1;
        $this->created = date('Y-m-d H:i:s');
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function getCreatedUpdated(){
        $html = '';
        if(isset($this->created_at)){
            $crUser = User::findOne($this->created_by);
            if(isset($crUser))
                $html .= " <p>Created by ".$crUser->getFullname()." at ". $this->created_at."</p>";
        }
        if(isset($this->updated_at)){
            $upUser = User::findOne($this->updated_by);
            if(isset($upUser))
                $html .= " <p>Updated by ".$upUser->getFullname()." at ". $this->updated_at."</p>";
        }
        return $html;
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'cl_messages';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['user_id', 'message'], 'required','on'=>['create','update']],
            [['user_id',  'patient_id'], 'integer'],
            [[ 'attachment', 'created','user_id', 'message','patient_id'], 'safe'],
            [[ 'attachment' ], 'file', 'extensions' => 'png, jpg, jpeg, gif', 'skipOnEmpty' => true, 'maxFiles' => 1 ],
        ];
    }

    public function getUser(){
        return $this->hasOne(User::className(),['user_id'=>'user_id']);
    }

    public function getPatient(){
        return $this->hasOne(User::className(),['user_id'=>'patient_id']);
    }


    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app','Id'),
            'user_id' => Yii::t('app','Sender'),
            'created' => Yii::t('app','Created'),
            'attachment' => Yii::t('app','Attachment'),
            'message' => Yii::t('app','Message')
        ];
    }


    
     /*  ---------------------------- GET  USER TITLE IN ROW -----------------------------------------  */
	
	 public function getUser_name( $user_id ) {  
	   
	   $output  = ''; 
	   $sql =  "SELECT * FROM  cl_users WHERE user_id = '". $user_id ."'  ";
	   $res = Yii::$app->db->createCommand( $sql )->queryAll();
	   foreach ( $res as $row ) { 	  $output  = $output .  $row['first_name'] ." ". $row['last_name'] . ' ';     }
	    
	   return $output; 
	} 
	
	
	
	 /*  ---------------------------- GET MESSAGE STATUS TITLE -----------------------------------------  */
	
	public function getMessage_status_name( $title )
	{   
		$item_name = '';  
	    foreach ( $GLOBALS["message_status"] as $key => $value) {
	         if ( $title == $key ) { $item_name  =  $value; }
	    }
	     return $item_name;
	}
 
    static public function markChatAsRead($patient_id){
        Yii::$app->db->createCommand()
            ->update(Messages::tableName(), ['read_by_admin' => 1], 'read_by_admin = 0 and patient_id = '.$patient_id)
            ->execute();
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $query =  Messages::find();

        // add conditions that should always apply here

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'pagination' => [
                'pageSize' => Providers::getNumUiItems(),
            ],
        ]);


        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }

        // grid filtering conditions
        $query->andFilterWhere([
            'id' => $this->id,
            'user_id' => $this->user_id,
            'created' => $this->created,
            'read_by_admin' => $this->read_by_admin,
        ]);

        $query->andFilterWhere(['like', 'attachment', $this->attachment])
            ->andFilterWhere(['like', 'message', $this->message]);


        // Group Chat branches
        $query->groupBy('user_id');

        return $dataProvider;
    }
}
